# Here images are deskewed and rotated DOES NOT SOLVE MAIN PROBLEM EFFICIENTLY

# open an image 

from turtle import right, width
import cv2 
# as cv if i want 
from matplotlib import pyplot as plt
image_file = "file name of image/name of image.type"
img = cv2.imread(image_file)
# display diff images with matplot
def display(im_path):
    dpi=80
    im_data = plt.imread(im_path)
    height,width,depth = im_data.shape
    # size to fit image
    figsize = width/float(dpi),height(dpi)
    # create a right size fig with one axes taking full figure
    fig = plt.figure(figsize=figsize)
    ax=fig.add_axes([0,0,1,1])
    #hide other
    ax.axis('off')
    #display
    ax.imshow(im_data,cmap='gray')

    plt.show()


# reconstruction process

# rotation - deskewing if needed (from segments of code)
# rotation happens to the whole image

import numpy as np
def swekangle(img):
    # prep image (already been)
    new=img.copy()
    gray=cv2.cvtColor(new,cv2.COLOR_BGR2GRAY)
    blur=cv2.GaussianBlur(gray,(9,9),0) #really large for indentifying contours of text
    thresh=cv2.threshold(blur,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)[1] #DONE HERE

    # dilate to make line texts
    # big kernel on x axis for merging characters to single lines
    # smaller kernel on y to separate diff blocks of text
    kernel=cv2.getStructuringElement(cv2.MORPH_RECT, (30,5))
    dilate=cv2.dilate(thresh,kernel,iterations=2)

    #finding contours of text
    contours,hierarchy =cv2.findContours(dilate,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
    contours=sorted(contours,key=cv2.contourArea,reverse=True)
    # for all line-contours of text create borders (rectangle)- bounding boxes
    for c in contours:
        rect=cv2.boundingRect(c)
        x,y,w,h=rect
        cv2.rectangle(new,(x,y),(x+w,y+h),(0,255,0),2)

    # largest contour surrounded in min box for text to alignment in x
    largest=contours[0]
    print (len(contours))
    minrect=cv2.minAreaRect(largest)
    cv2.imwrite("temp/boxed.jpg",new)
    
    #angle determination and convertion for skewed image
    angle=minrect[-1] #last
    if angle <-45:
        angle=90+angle
    return -1.0*angle

def rotated(img,angle:float):
    newer=img.copy()
    (h,w)=newer.shape[:2]
    center=(w//2,h//2)
    m=cv2.getRotationMatrix2D(center,angle,1.0)
    newer=cv2.warpAffine(newer,m,(w,h),flags=cv2.INTER_CUBIC,borders=cv2.BORDER_REPLICATE)
    return newer

# deskew image
def des(img):
    angle=swekangle(img)
    return rotated(img,-1.0*angle)

#call function for all

corrected =des(img)
cv2.imwrite("temp/readable.jpg",corrected)
#display("temp/corrected.jpg")

#OCR PRE CAN BE DONE HERE AGAIN FOR BETTER RESULTS



